一、nginx安装
1.这个已经在上篇进行说明，这里不详述

2.编写启动脚本
[kongzhong@192.168.1.11(Unknow) sh]$ more nginx.sh 
#!/bin/sh
#
# nginx - this script starts and stops the nginx daemon
#
# chkconfig:   - 85 15
# description:  Nginx is an HTTP(S) server, HTTP(S) reverse \
#               proxy and IMAP/POP3 proxy server
# processname: nginx
# config:      /etc/nginx/nginx.conf
# config:      /etc/sysconfig/nginx
# pidfile:     /var/run/nginx.pid

# Source function library.
. /etc/rc.d/init.d/functions

# Source networking configuration.
. /etc/sysconfig/network

# Check that networking is up.
[ "$NETWORKING" = "no" ] && exit 0

nginx="/apps/svr/nginx-1.12.1/sbin/nginx"
prog=$(basename $nginx)

sysconfig="/etc/sysconfig/$prog"
lockfile="/var/lock/subsys/nginx"
pidfile="/var/run/${prog}.pid"

NGINX_CONF_FILE="/apps/svr/nginx-1.12.1/conf/nginx.conf"

[ -f $sysconfig ] && . $sysconfig


start() {
    [ -x $nginx ] || exit 5
    [ -f $NGINX_CONF_FILE ] || exit 6
    echo -n $"Starting $prog: "
    daemon $nginx -c $NGINX_CONF_FILE
    retval=$?
    echo
    [ $retval -eq 0 ] && touch $lockfile
    return $retval
}

stop() {
    echo -n $"Stopping $prog: "
    killproc -p $pidfile $prog
    retval=$?
    echo
    [ $retval -eq 0 ] && rm -f $lockfile
    return $retval
}

restart() {
    configtest_q || return 6
    stop
    start
}

reload() {
    configtest_q || return 6
    echo -n $"Reloading $prog: "
    killproc -p $pidfile $prog -HUP
    echo
}

configtest() {
    $nginx -t -c $NGINX_CONF_FILE
}

configtest_q() {
    $nginx -t -q -c $NGINX_CONF_FILE
}

rh_status() {
    status $prog
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}

# Upgrade the binary with no downtime.
upgrade() {
    local oldbin_pidfile="${pidfile}.oldbin"

    configtest_q || return 6
    echo -n $"Upgrading $prog: "
    killproc -p $pidfile $prog -USR2
    retval=$?
    sleep 1
    if [[ -f ${oldbin_pidfile} && -f ${pidfile} ]];  then
        killproc -p $oldbin_pidfile $prog -QUIT
        success $"$prog online upgrade"
        echo 
        return 0
    else
        failure $"$prog online upgrade"
        echo
        return 1
    fi
}

# Tell nginx to reopen logs
reopen_logs() {
    configtest_q || return 6
    echo -n $"Reopening $prog logs: "
    killproc -p $pidfile $prog -USR1
    retval=$?
    echo
    return $retval
}

case "$1" in
    start)
        rh_status_q && exit 0
        $1
        ;;
    stop)
        rh_status_q || exit 0
        $1
        ;;
    restart|configtest|reopen_logs)
        $1
        ;;
    force-reload|upgrade) 
        rh_status_q || exit 7
        upgrade
        ;;
    reload)
        rh_status_q || exit 7
        $1
        ;;
    status|status_q)
        rh_$1
        ;;
    condrestart|try-restart)
        rh_status_q || exit 7
        restart
        ;;
    *)
        echo $"Usage: $0 {start|stop|reload|configtest|status|force-reload|upgrade|restart|reopen_logs}"
        exit 2

3.设置/etc/init.d/nginx.sh 执行权限
chmod 777 /etc/init.d/nginx.sh

4.设置开机默认启动
chkconfig --add nginx //添加系统服务
chkconfig --level 345 nginx on //设置开机启动,启动级别
chkconfig --list nginx //查看开机启动配置信息
5.nginx控制命令
service nginx start   #开启
service nginx stop    #停止
service nginx restart #重启
service nginx reload  #重新加载

6.编辑nginx conf文件
[kongzhong@192.168.1.11(Unknow) conf]$ more nginx.conf

user root;
worker_processes  1;
worker_rlimit_nofile 65535;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80;
        server_name  192.168.1.11;
        charset	     utf-8;
        large_client_header_buffers 4 16k;
        client_max_body_size 300m;
        client_body_buffer_size 128k;

        #proxy_connect_timeout 600;
        #proxy_read_timeout 600;
        #proxy_send_timeout 600;
        #proxy_buffer_size 64k;
        #proxy_buffers   4 32k;
        #proxy_busy_buffers_size 64k;
        #proxy_temp_file_write_size 64k;

	    fastcgi_connect_timeout 300;
	    fastcgi_read_timeout 300;
	    fastcgi_send_timeout 300;
	    fastcgi_buffer_size 64k;
	    fastcgi_buffers   4 32k;
	    fastcgi_busy_buffers_size 64k;
	    fastcgi_temp_file_write_size 64k;
        #charset koi8-r;
        #access_log  logs/host.access.log  main;

        location / {
            #root   html;
            include uwsgi_params;
            # 必须和uwsgi中的设置一致
	    uwsgi_pass unix:/svn_service_dir/www/web/my_blog/uwsgi9000.sock;
            # 入口文件，即wsgi.py相对于项目根目录的位置，“.”相当于一层目录
            uwsgi_param UWSGI_SCRIPT my_blog.wsgi;
            # 项目根目录
            uwsgi_param UWSGI_CHDIR /svn_service_dir/www/web/my_blog;
            index  index.html index.htm;
            client_max_body_size 35m;
        }
        
# your Django project's static files - amend as required
         location /static {     
             alias /svn_service_dir/www/web/my_blog/static;
         }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}


二、uwsgi安装
1.安装在上篇已说明，在此不详述
2.uwsgi配置 示例
在Django应用程序目录下创建deploy文件夹，加入uwsgi.ini文件
vim /svn_service_dir/www/web/my_blog/uwsgi.ini
拷贝以下内容
[uwsgi]
# Django-related settings
# the base directory (full path)
chdir       = /svn_service_dir/www/web/my_blog
# Django's wsgi file
module      = my_blog.wsgi:application
# process-related settings
# maximum number of worker processes
processes   = 1
# the socket 
#socket = 127.0.0.1:9000
socket = /svn_service_dir/www/web/my_blog/uwsgi9000.sock
# 主进程
master = true
# 多站模式  
vhost = true
# 多站模式时不设置入口模块和文件    
no-site = true    
# 子进程数
workers = 1 
reload-mercy = 2     
# 退出、重启时清理文件
vacuum = true  
max-requests = 1000   
limit-as = 512
buffer-size = 30000
# pid文件，用于下面的脚本启动、停止该进程
pidfile = /svn_service_dir/www/web/my_blog/uwsgi9000.pid 
daemonize = /svn_service_dir/www/web/logs/uwsgi9000.log
env = DJANGO_SETTINGS_MODULE=my_blog.settings
#module = django.core.handlers.wsgi:WSGIHandler()
#module = my_blog.wsgi:application

三、supervisor安装
1.安装不详述
2.创建默认的配置文件
echo_supervisord_conf  >/etc/supervisord.conf
3.配置开机启动
在/etc/init.d/目录下创建 supervisord 文件
[kongzhong@192.168.1.11(Unknow) sh]$ more supervisord.sh 
#!/bin/bash
#
# supervisord   This scripts turns supervisord on
# chkconfig:    345 83 04
# description:  supervisor is a process control utility.  It has a web based
#     xmlrpc interface as well as a few other nifty features.
#

# source function library
. /etc/rc.d/init.d/functions

set -a

PREFIX=/usr/local

SUPERVISORD=$PREFIX/bin/supervisord
SUPERVISORCTL=$PREFIX/bin/supervisorctl

PIDFILE=/var/supervisor/supervisord.pid
LOCKFILE=/var/supervisor/supervisord.lock

OPTIONS="-c /etc/supervisor/supervisord.conf"

# unset this variable if you don't care to wait for child processes to shutdown before removing the $LOCKFILE-lock
WAIT_FOR_SUBPROCESSES=yes

# remove this if you manage number of open files in some other fashion
ulimit -n 96000

RETVAL=0


running_pid()
{
  # Check if a given process pid's cmdline matches a given name
  pid=$1
  name=$2
  [ -z "$pid" ] && return 1
  [ ! -d /proc/$pid ] && return 1
  (cat /proc/$pid/cmdline | tr "\000" "\n"|grep -q $name) || return 1
  return 0
}

running()
{
# Check if the process is running looking at /proc
# (works for all users)

  # No pidfile, probably no daemon present
  [ ! -f "$PIDFILE" ] && return 1
  # Obtain the pid and check it against the binary name
  pid=`cat $PIDFILE`
  running_pid $pid $SUPERVISORD || return 1
  return 0
}

start() {
    echo "Starting supervisord: "

    if [ -e $PIDFILE ]; then 
    echo "ALREADY STARTED"
    return 1
  fi

  # start supervisord with options from sysconfig (stuff like -c)
  $SUPERVISORD $OPTIONS

  # show initial startup status
  $SUPERVISORCTL $OPTIONS status

  # only create the subsyslock if we created the PIDFILE
    [ -e $PIDFILE ] && touch $LOCKFILE
}

stop() {
    echo -n "Stopping supervisord: "
    $SUPERVISORCTL $OPTIONS shutdown
  if [ -n "$WAIT_FOR_SUBPROCESSES" ]; then 
      echo "Waiting roughly 60 seconds for $PIDFILE to be removed after child processes exit"
      for sleep in  2 2 2 2 4 4 4 4 8 8 8 8 last; do
        if [ ! -e $PIDFILE ] ; then
          echo "Supervisord exited as expected in under $total_sleep seconds"
          break
        else
          if [[ $sleep -eq "last" ]] ; then
            echo "Supervisord still working on shutting down. We've waited roughly 60 seconds, we'll let it do its thing from here"
            return 1
          else
            sleep $sleep
            total_sleep=$(( $total_sleep + $sleep ))
          fi

        fi
      done
    fi

    # always remove the subsys. We might have waited a while, but just remove it at this point.
    rm -f $LOCKFILE
}

restart() {
    stop
    start
}

case "$1" in
  start)
    start
    RETVAL=$?
    ;;
  stop)
    stop
    RETVAL=$?
    ;;
  restart|force-reload)
    restart
    RETVAL=$?
    ;;
  reload)
    $SUPERVISORCTL $OPTIONS reload
    RETVAL=$?
    ;;
  condrestart)
    [ -f $LOCKFILE ] && restart
    RETVAL=$?
    ;;
  status)
    $SUPERVISORCTL $OPTIONS status
    if running ; then
      RETVAL=0
    else
      RETVAL=1
    fi
    ;;
  *)
    echo $"Usage: $0 {start|stop|status|restart|reload|force-reload|condrestart}"
    exit 1
esac

exit $RETVAL

4.设置/etc/init.d/supervisord 执行权限
chmod 777 /etc/init.d/supervisord
设置开机默认启动
chkconfig --add supervisord //添加系统服务
chkconfig --level 345 supervisord on //设置开机启动,启动级别
在vim /etc/supervisor/supervisord.conf添加如下信息
[kongzhong@192.168.1.11(Unknow) sh]$ more /etc/supervisor/supervisord.conf
[unix_http_server]
file=/tmp/supervisor.sock   ; (the path to the socket file)
chmod=0700                 ; socket file mode (default 0700)
chown=root:root		   ; socket file uid:gid owner

[inet_http_server]         ; inet (TCP) server disabled by default
port=*:9001           	   ; (ip_address:port specifier, *:port for all iface)
username=admin             ; (default is no username (open server))
password=admin             ; (default is no password (open server))

[supervisord]
logfile=/svn_service_dir/www/web/logs/supervisord.log ; (main log file;default $CWD/supervisord.log)
logfile_maxbytes=50MB        ; (max main logfile bytes b4 rotation;default 50MB)
logfile_backups=10           ; (num of main logfile rotation backups;default 10)
loglevel=info                ; (log level;default info; others: debug,warn,trace)
pidfile=/tmp/supervisord.pid ; (supervisord pidfile;default supervisord.pid)
nodaemon=false               ; (start in foreground if true;default false)
minfds=1024                  ; (min. avail startup file descriptors;default 1024)
minprocs=200                 ; (min. avail process descriptors;default 200)
user=root                    ; (default is current user, required if root)
childlogdir=/tmp             ; ('AUTO' child log dir, default $TEMP)

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///tmp/supervisor.sock ; use a unix:// URL  for a unix socket

[program:my_blog]
;command=/usr/sbin/uwsgi --http :8001 --chdir /svn_service_dir/www/web/my_blog --module my_blog.wsgi
command=/usr/sbin/uwsgi --ini /svn_service_dir/www/web/my_blog/uwsgi.ini
directory=/svn_service_dir/www/web/my_blog
stopsignal=QUIT
numprocs=1
autostart=true
autorestart=unexpected
redirect_stderr=true
stdout_logfile=/svn_service_dir/www/web/logs/supervisor.log
stderr_logfile=/svn_service_dir/www/web/logs/uwsgi_start.log
exitcodes=1
user=root

5.supervisor控制命令
supervisorctl status  #查看进程运行状态
supervisorctl reload  #重新加载配置

四、wsgi.py文件
[kongzhong@192.168.1.11(Unknow) my_blog]$ more /svn_service_dir/www/web/my_blog/my_blog

*** /svn_service_dir/www/web/my_blog/my_blog: directory ***

[kongzhong@192.168.1.11(Unknow) my_blog]$ more /svn_service_dir/www/web/my_blog/my_blog/wsgi.py
"""
WSGI config for wictrl project.

This module contains the WSGI application used by Django's development server
and any production WSGI deployments. It should expose a module-level variable
named ``application``. Django's ``runserver`` and ``runfcgi`` commands discover
this application via the ``WSGI_APPLICATION`` setting.

Usually you will have the standard Django WSGI application here, but it also
might make sense to replace the whole Django WSGI application with a custom one
that later delegates to the Django one. For example, you could introduce WSGI
middleware here, or combine a Django application with an application of another
framework.

"""
import os
import sys
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "my_blog.settings")
sys.path.append('/usr/local/lib/python2.7/site-packages')  

# This application object is used by any WSGI server configured to use this
# file. This includes Django's development server, if the WSGI_APPLICATION
# setting points here.
from django.core.wsgi import get_wsgi_application

application = get_wsgi_application()

# Apply WSGI middleware here.
# from helloworld.wsgi import HelloWorldApplication
# application = HelloWorldApplication(application)

